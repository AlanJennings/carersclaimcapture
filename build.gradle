buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "${artifactory_url}repo"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.4.9')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.github.robfletcher:compass-gradle-plugin:2.0.6"
        classpath "com.github.jruby-gradle:jruby-gradle-plugin:0.1.+"
    }
}

allprojects {
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: "com.github.robfletcher.compass"
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'spring-boot'
    apply plugin: 'war'
    version = '4.00-SNAPSHOT'
    archivesBaseName = 'c3'
    group = 'gov.dwp.carers'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    description = 'c3 Gradle Webapp'
}

compass {
    sassDir = file("$projectDir/src/main/webapp/resources/stylesheet/scss")
    cssDir = file("$projectDir/src/main/webapp/resources/stylesheet")
}

String repo = version.endsWith('SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local'

artifactory {
    contextUrl = "${artifactory_url}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        mavenLocal()
        repository {
            repoKey = repo
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true

        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publications('mavenJava', 'distribution', 'databaseZip')
            publishArtifacts = true
            publishPom = true // Publish generated POM files to Artifactory (true by default)
        }
    }
    resolve {
        repository {
            repoKey = 'repo'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    compile.exclude module: "tomcat-jdbc"
    testCompile.exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
    testCompile.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

dependencies {
    compile("com.zaxxer:HikariCP")
    compile("commons-io:commons-io:2.5")
    compile("commons-lang:commons-lang:2.6")
    compile("gov.dwp.carers:carerscommon:8.08-SNAPSHOT")
    compile("gov.dwp.carers:xmlcommons:8.28-SNAPSHOT")
    compile "io.dropwizard.metrics:metrics-core:3.1.2"
    compile("javax.inject:javax.inject:1")
    compile("javax.servlet:jstl")
    compile("org.apache.commons:commons-lang3:3.5")
    compile("org.apache.httpcomponents:httpclient")
    compile("org.apache.tomcat.embed:tomcat-embed-jasper")
    compile("org.postgresql:postgresql")
    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-websocket")
    runtime("me.moocar:logback-gelf:0.3")
    compile( group: 'joda-time', name: 'joda-time', version: '2.8.1' )
    testCompile (
            'org.springframework.boot:spring-boot-starter-test',
            'org.assertj:assertj-core:3.5.2',
            'org.springframework.security:spring-security-test'
    )
    testCompile("gov.dwp.carers:testcommons:1.09-SNAPSHOT")
}


//Use this for publishing to local Maven repo
//gradle publishToMavenLocal
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact (sourcesJar) {
                classifier = 'sources'
            }

        }
        distribution(MavenPublication) {
            artifact ("${libsDir}/${archivesBaseName}-${version}-full.war") {
                classifier = 'full'
            }
        }
        databaseZip(MavenPublication) {
            artifact zipDatabase{
                classifier "db"
                extension "zip"
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task zipDatabase(type: Zip, dependsOn: classes) {
    classifier = 'db'
    from "db"
}

task createInfoFile << {
    def props = new Properties()
    props.setProperty("application.version", version)
    props.setProperty("application.name", rootProject.name)
    def writer = new FileWriter(file('./config/application-info.properties'))
    try {
        props.store(writer, "application-info.properties Created for build version:" + version)
        writer.flush()
    } finally {
        writer.close()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

test {
    testLogging.showStandardStreams = true
}

bootRun {
    addResources = true
}

springBoot {
    mainClass = "uk.gov.dwp.carersallowance.controller.started.C3Application"
}

war {
    exclude('**/custom.js')
    exclude('**/*.scss')
}

def renameFile(oldName, newName) {
    new File(oldName).renameTo(new File(newName))
}

bootRepackage.doLast {
    renameFile("${libsDir}/${archivesBaseName}-${version}.war", "${libsDir}/${archivesBaseName}-${version}-full.war");
    delete ("${libsDir}/${archivesBaseName}-${version}.war.original");
}

